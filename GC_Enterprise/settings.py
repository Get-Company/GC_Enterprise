"""
Django settings for GC_Enterprise project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import tempfile
from datetime import datetime
from pathlib import Path

from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

from dotenv import load_dotenv

from GC_Enterprise.utils.logging_handlers import DailyFileHandler


# BASE_DIR verweist jetzt auf das Verzeichnis `GC_Enterprise/app/`
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / '.env_teilrechnung')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

# ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')
ALLOWED_HOSTS = ['localhost','127.0.0.1']

# URL-Präfix für den Zugriff auf die Medien-Dateien
MEDIA_URL = '/media/'

# Pfad zum Verzeichnis, in dem die Medien-Dateien gespeichert werden
MEDIA_ROOT = BASE_DIR / 'media'

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

# Application definition

INSTALLED_APPS = [
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    'colorfield',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'import_export',
    'phonenumber_field',
    'rangefilter',
    'dbbackup',
    'rest_framework',
    'tinymce',
    'simple_history',
    'orders',
    'customers',
    'company',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


]

ROOT_URLCONF = 'GC_Enterprise.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': False,  # Wichtig: Nicht Django-Templates automatisch laden
        'OPTIONS': {
            'environment': 'GC_Enterprise.jinja2.environment',  # Passe den Pfad an
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GC_Enterprise.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),             # django.db.backends.mysql
        'NAME': os.getenv('DB_NAME'),                 # mydb
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
        'OPTIONS': {
            'charset': 'utf8mb4',
        },
    },
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

# USE_I18N = True  # Use international time, date and numbers
USE_L10N = True

USE_TZ = True
USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'  # URL für das Servieren der statischen Dateien
STATICFILES_DIRS = [BASE_DIR / 'static']  # Ort der statischen Dateien, die gesammelt werden sollen
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Ort, an dem die gesammelten statischen Dateien gespeichert werden

LOGIN_REDIRECT_URL = reverse_lazy('admin:orders_order_changelist')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Pfad für Backups festlegen
BACKUP_DIR = BASE_DIR / 'backups'
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'  # Lokale Speicherung
DBBACKUP_STORAGE_OPTIONS = {'location': BACKUP_DIR}  # Speicherort für Backups

DARK_BLUE = {
    "font": {
        "subtle-light": "70 130 180",
        "subtle-dark": "0 102 204",
        "default-light": "0 76 153",
        "default-dark": "0 51 102",
        "important-light": "28 32 82",
        "important-dark": "0 0 139",
    },
    "primary": {
        "50": "230 240 255",
        "100": "210 225 255",
        "200": "180 200 255",
        "300": "130 170 255",
        "400": "90 150 255",
        "500": "50 120 255",
        "600": "30 90 255",
        "700": "20 70 255",
        "800": "10 50 204",
        "900": "5 30 153",
        "950": "0 20 102",
    },
}

UNFOLD = {
    "SITE_TITLE": "Riesemann - Kunden- und Projektverwaltung",
    "SITE_HEADER": "Riesemann Administration",
    "SITE_LOGO": {
        "light": lambda request: f"{MEDIA_URL}company/company_logos/riesemann.png",  # light mode
        "dark": lambda request: f"{MEDIA_URL}company/company_logos/riesemann.png",  # dark mode
    },
    "SITE_SYMBOL": "house",  # symbol from icon set
    "SHOW_VIEW_ON_SITE": False,
    "LOGIN": {
        "image": lambda request: static("admin/img/belvedere_logo.webp"),
        "redirect_after": lambda request: reverse_lazy("admin:orders_order_changelist"),
    },
    "COLORS": {**DARK_BLUE},
    "SIDEBAR": {
        "navigation": [
            # Customer
            # {
            #     "title": _("Kunden- und Auftragsverwaltung"),
            #     "separator": False,  # Add top border
            #     "collapsible": False,  # Make this section collapsible
            #     "items": [
            #         {
            #             "title": _("Dashboard"),
            #             "icon": "dashboard",
            #             "link": reverse_lazy("admin:index"),  # Link to admin dashboard
            #             "permission": lambda request: request.user.is_superuser,
            #         },
            #     ],
            # },
            # Orders App
            {
                "title": _("Projektverwaltung"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Projekte"),
                        "icon": "receipt_long",
                        "link": reverse_lazy("admin:orders_order_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("LPH/Aufgaben"),
                        "icon": "task",
                        "link": reverse_lazy("admin:orders_task_changelist"),
                        "permission": lambda request: request.user.has_perm("orders.view_task"),
                    },
                    {
                        "title": _("Zeiterfassung"),
                        "icon": "view_list",
                        "link": reverse_lazy("admin:orders_taskposition_changelist"),
                        "permission": lambda request: request.user.has_perm("orders.view_taskposition"),
                    },
                    {
                        "title": _("Dokumente"),
                        "icon": "description",
                        "link": reverse_lazy("admin:orders_document_changelist"),
                        "permission": lambda request: request.user.has_perm("orders.view_document"),
                    },
                    # Add other models from the orders app here
                ],
            },
            # Customers App
            {
                "title": _("Kundenverwaltung"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Kunden"),
                        "icon": "people",
                        "link": reverse_lazy("admin:customers_customer_changelist"),
                        "permission": lambda request: request.user.has_perm("customers.view_customer"),
                    },
                ],
            },
            # Company App
            {
                "title": _("Unternehmensverwaltung"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Unternehmen"),
                        "icon": "business",
                        "link": reverse_lazy("admin:company_company_changelist"),
                        "permission": lambda request: request.user.has_perm("company.view_company"),
                    },
                    {
                        "title": _("Ansprechpartner"),
                        "icon": "contacts",
                        "link": reverse_lazy("admin:company_contact_changelist"),
                        "permission": lambda request: request.user.has_perm("company.view_contact"),
                    },
                    {
                        "title": _("Banken"),
                        "icon": "account_balance",
                        "link": reverse_lazy("admin:company_bank_changelist"),
                        "permission": lambda request: request.user.has_perm("company.view_contact"),
                    },
                    {
                        "title": _("Social Media"),
                        "icon": "groups",
                        "link": reverse_lazy("admin:company_socialmedia_changelist"),
                        "permission": lambda request: request.user.has_perm("company.view_contact"),
                    },
                    # Add other models from the company app here
                ],
            },
            # Einstellungen
            {
                "title": _("Einstellungen"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Benutzer"),
                        "icon": "person",
                        "link": reverse_lazy("admin:auth_user_changelist"),
                        "permission": lambda request: request.user.has_perm("auth.view_user"),
                    },
                    {
                        "title": _("Benutzergruppen"),
                        "icon": "group",
                        "link": reverse_lazy("admin:auth_group_changelist"),
                        "permission": lambda request: request.user.has_perm("auth.view_group"),
                    },
                    {
                        "title": _("Projekt Index"),
                        "icon": "format_list_numbered",
                        "link": reverse_lazy("admin:company_ordercounter_changelist"),
                        "permission": lambda request: request.user.has_perm("auth.view_user"),
                    },
                    {
                        "title": _("Dokument Arten"),
                        "icon": "difference",
                        "link": reverse_lazy("admin:orders_documenttype_changelist"),
                        "permission": lambda request: request.user.has_perm("auth.view_user"),
                    },
                    {
                        "title": _("Tags | Markierungen"),
                        "icon": "sell",
                        "link": reverse_lazy("admin:orders_tag_changelist"),
                        "permission": lambda request: request.user.has_perm("auth.view_user"),
                    },
                    {
                        "title": _("Steuerarten"),
                        "icon": "percent",
                        "link": reverse_lazy("admin:orders_vat_changelist"),
                        "permission": lambda request: request.user.has_perm("auth.view_user"),
                    },
                    {
                        "title": _("Honorarklassen Gruppen"),
                        "icon": "collections_bookmark",
                        "link": reverse_lazy("admin:orders_feegroup_changelist"),
                        "permission": lambda request: request.user.has_perm("orders.view_feegroup"),
                    },
                    {
                        "title": _("Leistungsphasen"),
                        "icon": "service_toolbox",
                        "link": reverse_lazy("admin:orders_servicephase_changelist"),
                        "permission": lambda request: request.user.has_perm("orders.view_feerate"),
                    },
                    # {
                    #     "title": _("Projekt Leistungsphasen"),
                    #     "icon": "service_toolbox",
                    #     "link": reverse_lazy("admin:orders_orderservicephase_changelist"),
                    #     "permission": lambda request: request.user.has_perm("orders.view_feerate"),
                    # },
                ],
            },
        ]
    },
        # "DASHBOARD_CALLBACK": "orders.views.dashboard_callback",
}

TINYMCE_DEFAULT_CONFIG = {
    'height': 200,  # Globale Höhe
    'plugins': 'code',  # Das Code-Plugin aktivieren
    'toolbar': 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',  # Schaltfläche hinzufügen
    'menubar': False,  # Kein Menü
    'branding': False,  # Branding entfernen
}


# Pfad des Temp-Verzeichnisses relativ zum Projektverzeichnis
PROJECT_TEMP_DIR = os.path.join(BASE_DIR, 'temp')

# Erstelle das Verzeichnis, falls es nicht existiert
os.makedirs(PROJECT_TEMP_DIR, exist_ok=True)

# Setze die Umgebungsvariablen für temporäre Dateien
os.environ['TMPDIR'] = PROJECT_TEMP_DIR

PHONENUMBER_DEFAULT_REGION = 'DE'
